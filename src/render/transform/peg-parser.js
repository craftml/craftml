module.exports = /*
* Generated by PEG.js 0.10.0.
*
* http://pegjs.org/
*/
(function() {
 "use strict";

 function peg$subclass(child, parent) {
   function ctor() { this.constructor = child; }
   ctor.prototype = parent.prototype;
   child.prototype = new ctor();
 }

 function peg$SyntaxError(message, expected, found, location) {
   this.message  = message;
   this.expected = expected;
   this.found    = found;
   this.location = location;
   this.name     = "SyntaxError";

   if (typeof Error.captureStackTrace === "function") {
     Error.captureStackTrace(this, peg$SyntaxError);
   }
 }

 peg$subclass(peg$SyntaxError, Error);

 peg$SyntaxError.buildMessage = function(expected, found) {
   var DESCRIBE_EXPECTATION_FNS = {
         literal: function(expectation) {
           return "\"" + literalEscape(expectation.text) + "\"";
         },

         "class": function(expectation) {
           var escapedParts = "",
               i;

           for (i = 0; i < expectation.parts.length; i++) {
             escapedParts += expectation.parts[i] instanceof Array
               ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
               : classEscape(expectation.parts[i]);
           }

           return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
         },

         any: function(expectation) {
           return "any character";
         },

         end: function(expectation) {
           return "end of input";
         },

         other: function(expectation) {
           return expectation.description;
         }
       };

   function hex(ch) {
     return ch.charCodeAt(0).toString(16).toUpperCase();
   }

   function literalEscape(s) {
     return s
       .replace(/\\/g, '\\\\')
       .replace(/"/g,  '\\"')
       .replace(/\0/g, '\\0')
       .replace(/\t/g, '\\t')
       .replace(/\n/g, '\\n')
       .replace(/\r/g, '\\r')
       .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
       .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
   }

   function classEscape(s) {
     return s
       .replace(/\\/g, '\\\\')
       .replace(/\]/g, '\\]')
       .replace(/\^/g, '\\^')
       .replace(/-/g,  '\\-')
       .replace(/\0/g, '\\0')
       .replace(/\t/g, '\\t')
       .replace(/\n/g, '\\n')
       .replace(/\r/g, '\\r')
       .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
       .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
   }

   function describeExpectation(expectation) {
     return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
   }

   function describeExpected(expected) {
     var descriptions = new Array(expected.length),
         i, j;

     for (i = 0; i < expected.length; i++) {
       descriptions[i] = describeExpectation(expected[i]);
     }

     descriptions.sort();

     if (descriptions.length > 0) {
       for (i = 1, j = 1; i < descriptions.length; i++) {
         if (descriptions[i - 1] !== descriptions[i]) {
           descriptions[j] = descriptions[i];
           j++;
         }
       }
       descriptions.length = j;
     }

     switch (descriptions.length) {
       case 1:
         return descriptions[0];

       case 2:
         return descriptions[0] + " or " + descriptions[1];

       default:
         return descriptions.slice(0, -1).join(", ")
           + ", or "
           + descriptions[descriptions.length - 1];
     }
   }

   function describeFound(found) {
     return found ? "\"" + literalEscape(found) + "\"" : "end of input";
   }

   return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
 };

 function peg$parse(input, options) {
   options = options !== void 0 ? options : {};

   var peg$FAILED = {},

       peg$startRuleFunctions = { start: peg$parsestart },
       peg$startRuleFunction  = peg$parsestart,

       peg$c0 = ";",
       peg$c1 = peg$literalExpectation(";", false),
       peg$c2 = function(head, tail) {
               var blocks = []
               if (head){
                   blocks.push(head)
               }
               tail.forEach(function(toks){
                   if (toks[2]){
                       blocks.push(toks[2])
                   }
               })
               return blocks
           },
       peg$c3 = function(m, args) {
               var dims = []
               args.forEach(function(arg){
                   var axes = arg[1]
                   axes.forEach(function(axis){
                       dims.push(axis)
                   })
               })

               return {method: m, args: dims}
           },
       peg$c4 = function(m) {
               return {method: m, args: {}}
           },
       peg$c5 = function(m) {
               error('\'' + m + '\' is not a valid operation')
           },
       peg$c6 = function() {
               return null
           },
       peg$c7 = function(m, args) {
                 return {method: m, args: args}
            },
       peg$c8 = function(m) {
               error('\'' + m + '\' has invalid arguments')
           },
       peg$c9 = "reverse",
       peg$c10 = peg$literalExpectation("reverse", false),
       peg$c11 = function() {
               return {method: 'reverse'}
           },
       peg$c12 = "cut",
       peg$c13 = peg$literalExpectation("cut", false),
       peg$c14 = function(s) {
               return {method: 'cut', args: s}
           },
       peg$c15 = "select",
       peg$c16 = peg$literalExpectation("select", false),
       peg$c17 = function(s) {
               return {method: 'select', args: s}
           },
       peg$c18 = "clip",
       peg$c19 = peg$literalExpectation("clip", false),
       peg$c20 = function(s) {
               return {method: 'clip', args: s}
           },
       peg$c21 = "hull",
       peg$c22 = peg$literalExpectation("hull", false),
       peg$c23 = function(s) {
               return {method: 'hull', args: s}
           },
       peg$c24 = function() {
               return {method: 'hull'}
           },
       peg$c25 = "wall",
       peg$c26 = peg$literalExpectation("wall", false),
       peg$c27 = function(s) {
               return {method: 'wall', args: s}
           },
       peg$c28 = function() {
               return {method: 'wall'}
           },
       peg$c29 = "align",
       peg$c30 = peg$literalExpectation("align", false),
       peg$c31 = function(args) { return {method: 'align', args: args}},
       peg$c32 = "adjoin",
       peg$c33 = peg$literalExpectation("adjoin", false),
       peg$c34 = function(args) {
               return {method: 'adjoin', args: args}
           },
       peg$c35 = "join",
       peg$c36 = peg$literalExpectation("join", false),
       peg$c37 = function(args) {
               return {method: 'join', args: args}
           },
       peg$c38 = "flow",
       peg$c39 = peg$literalExpectation("flow", false),
       peg$c40 = function(args) {
               return {method: 'flow', args: args}
           },
       peg$c41 = "crop",
       peg$c42 = peg$literalExpectation("crop", false),
       peg$c43 = function(args) {
               return {method: 'crop', args: args}
           },
       peg$c44 = "pad",
       peg$c45 = peg$literalExpectation("pad", false),
       peg$c46 = function(args) {
               return {method: 'pad', args: args}
           },
       peg$c47 = "orbit",
       peg$c48 = peg$literalExpectation("orbit", false),
       peg$c49 = function(args) {
               return {method: 'orbit', args: args}
           },
       peg$c50 = "spread",
       peg$c51 = peg$literalExpectation("spread", false),
       peg$c52 = function(args) { return {method: 'spread', args: args}},
       peg$c53 = function(head, tail) { return makeList(head, tail)},
       peg$c54 = function(a, n) { return {number:n, axes: a}},
       peg$c55 = "min",
       peg$c56 = peg$literalExpectation("min", false),
       peg$c57 = "max",
       peg$c58 = peg$literalExpectation("max", false),
       peg$c59 = "center",
       peg$c60 = peg$literalExpectation("center", false),
       peg$c61 = function(a, n, m) {
               return {number: n, axes: a, side: m}
           },
       peg$c62 = function(a, m, n) {
               return {number: n, axes: a, side: m}
           },
       peg$c63 = function(a, n) {
               return {number: n, axes: a}
           },
       peg$c64 = function(a, m) {
               return {axes: a, side: m}
           },
       peg$c65 = function(a) {
               return {axes: a}
           },
       peg$c66 = function(as) {
           var xyz = {}
           as.forEach(function(a){
               var axes = a[1]
               var val = a[3]
               axes.forEach(function(axis){
                  xyz[axis] = val
               })
           })
           return xyz
       },
       peg$c67 = ",",
       peg$c68 = peg$literalExpectation(",", false),
       peg$c69 = function() { return text() },
       peg$c70 = ">",
       peg$c71 = peg$literalExpectation(">", false),
       peg$c72 = /^[.#:>a-zA-Z1-9\-_()]/,
       peg$c73 = peg$classExpectation([".", "#", ":", ">", ["a", "z"], ["A", "Z"], ["1", "9"], "-", "_", "(", ")"], false, false),
       peg$c74 = /^[a-z]/,
       peg$c75 = peg$classExpectation([["a", "z"]], false, false),
       peg$c76 = function() { return text()},
       peg$c77 = "land",
       peg$c78 = peg$literalExpectation("land", false),
       peg$c79 = "scale",
       peg$c80 = peg$literalExpectation("scale", false),
       peg$c81 = "translate",
       peg$c82 = peg$literalExpectation("translate", false),
       peg$c83 = "fit",
       peg$c84 = peg$literalExpectation("fit", false),
       peg$c85 = "rotate",
       peg$c86 = peg$literalExpectation("rotate", false),
       peg$c87 = "size",
       peg$c88 = peg$literalExpectation("size", false),
       peg$c89 = "position",
       peg$c90 = peg$literalExpectation("position", false),
       peg$c91 = "mirror",
       peg$c92 = peg$literalExpectation("mirror", false),
       peg$c93 = "flip",
       peg$c94 = peg$literalExpectation("flip", false),
       peg$c95 = "wrap",
       peg$c96 = peg$literalExpectation("wrap", false),
       peg$c97 = "",
       peg$c98 = function(args) {
               return {method: "center", args: args}
           },
       peg$c99 = function() {
             return {method: "center", args: {}}
           },
       peg$c100 = function(as) {
           var xyz = {}
           as.forEach(function(a){
               var axes = a[0]
               var val = a[2]
               axes.forEach(function(axis){
                  xyz[axis] = val
               })
           })
           return xyz
       },
       peg$c101 = function(x, y, z) {
           return {x:x, y:y, z:z}
       },
       peg$c102 = function(v) {
           var xyz = {x: v, y: v, z: v}
           return xyz
       },
       peg$c103 = function(as) {
           var xyz = {}
           as.forEach(function(a){
               var axes = a[1]
               var pair = a[3]
               axes.forEach(function(axis){
                   if (pair.length === 2){
                        xyz[axis] = pair
                   }else{
                       xyz[axis] = [pair, 0]
                   }
               })
           })
           return xyz
       },
       peg$c104 = function(v) {
           var xyz = {x: v, y: v, z: v}
           return xyz
       },
       peg$c105 = function(v) {
          var xyz = {x: [v,0], y: [v,0], z: [v,0]}
           return xyz
       },
       peg$c106 = function(v1, v2) { return [v1, v2]},
       peg$c107 = /^[\-]/,
       peg$c108 = peg$classExpectation(["-"], false, false),
       peg$c109 = /^[0-9]/,
       peg$c110 = peg$classExpectation([["0", "9"]], false, false),
       peg$c111 = /^[.]/,
       peg$c112 = peg$classExpectation(["."], false, false),
       peg$c113 = /^[e]/,
       peg$c114 = peg$classExpectation(["e"], false, false),
       peg$c115 = function() { return Number(text())},
       peg$c116 = "%",
       peg$c117 = peg$literalExpectation("%", false),
       peg$c118 = function(n) { return {type:'percentage', value: n}},
       peg$c119 = /^[x-z]/,
       peg$c120 = peg$classExpectation([["x", "z"]], false, false),
       peg$c121 = peg$otherExpectation("whitespace"),
       peg$c122 = /^[ \t\n\r]/,
       peg$c123 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
       peg$c124 = function() { return ''},

       peg$currPos          = 0,
       peg$savedPos         = 0,
       peg$posDetailsCache  = [{ line: 1, column: 1 }],
       peg$maxFailPos       = 0,
       peg$maxFailExpected  = [],
       peg$silentFails      = 0,

       peg$result;

   if ("startRule" in options) {
     if (!(options.startRule in peg$startRuleFunctions)) {
       throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
     }

     peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
   }

   function text() {
     return input.substring(peg$savedPos, peg$currPos);
   }

   function location() {
     return peg$computeLocation(peg$savedPos, peg$currPos);
   }

   function expected(description, location) {
     location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

     throw peg$buildStructuredError(
       [peg$otherExpectation(description)],
       input.substring(peg$savedPos, peg$currPos),
       location
     );
   }

   function error(message, location) {
     location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

     throw peg$buildSimpleError(message, location);
   }

   function peg$literalExpectation(text, ignoreCase) {
     return { type: "literal", text: text, ignoreCase: ignoreCase };
   }

   function peg$classExpectation(parts, inverted, ignoreCase) {
     return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
   }

   function peg$anyExpectation() {
     return { type: "any" };
   }

   function peg$endExpectation() {
     return { type: "end" };
   }

   function peg$otherExpectation(description) {
     return { type: "other", description: description };
   }

   function peg$computePosDetails(pos) {
     var details = peg$posDetailsCache[pos], p;

     if (details) {
       return details;
     } else {
       p = pos - 1;
       while (!peg$posDetailsCache[p]) {
         p--;
       }

       details = peg$posDetailsCache[p];
       details = {
         line:   details.line,
         column: details.column
       };

       while (p < pos) {
         if (input.charCodeAt(p) === 10) {
           details.line++;
           details.column = 1;
         } else {
           details.column++;
         }

         p++;
       }

       peg$posDetailsCache[pos] = details;
       return details;
     }
   }

   function peg$computeLocation(startPos, endPos) {
     var startPosDetails = peg$computePosDetails(startPos),
         endPosDetails   = peg$computePosDetails(endPos);

     return {
       start: {
         offset: startPos,
         line:   startPosDetails.line,
         column: startPosDetails.column
       },
       end: {
         offset: endPos,
         line:   endPosDetails.line,
         column: endPosDetails.column
       }
     };
   }

   function peg$fail(expected) {
     if (peg$currPos < peg$maxFailPos) { return; }

     if (peg$currPos > peg$maxFailPos) {
       peg$maxFailPos = peg$currPos;
       peg$maxFailExpected = [];
     }

     peg$maxFailExpected.push(expected);
   }

   function peg$buildSimpleError(message, location) {
     return new peg$SyntaxError(message, null, null, location);
   }

   function peg$buildStructuredError(expected, found, location) {
     return new peg$SyntaxError(
       peg$SyntaxError.buildMessage(expected, found),
       expected,
       found,
       location
     );
   }

   function peg$parsestart() {
     var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

     s0 = peg$currPos;
     s1 = peg$parse_();
     if (s1 !== peg$FAILED) {
       s2 = peg$parseblock();
       if (s2 !== peg$FAILED) {
         s3 = peg$parse_();
         if (s3 !== peg$FAILED) {
           s4 = [];
           s5 = peg$currPos;
           if (input.charCodeAt(peg$currPos) === 59) {
             s6 = peg$c0;
             peg$currPos++;
           } else {
             s6 = peg$FAILED;
             if (peg$silentFails === 0) { peg$fail(peg$c1); }
           }
           if (s6 !== peg$FAILED) {
             s7 = peg$parse_();
             if (s7 !== peg$FAILED) {
               s8 = peg$parseblock();
               if (s8 !== peg$FAILED) {
                 s9 = peg$parse_();
                 if (s9 !== peg$FAILED) {
                   s6 = [s6, s7, s8, s9];
                   s5 = s6;
                 } else {
                   peg$currPos = s5;
                   s5 = peg$FAILED;
                 }
               } else {
                 peg$currPos = s5;
                 s5 = peg$FAILED;
               }
             } else {
               peg$currPos = s5;
               s5 = peg$FAILED;
             }
           } else {
             peg$currPos = s5;
             s5 = peg$FAILED;
           }
           while (s5 !== peg$FAILED) {
             s4.push(s5);
             s5 = peg$currPos;
             if (input.charCodeAt(peg$currPos) === 59) {
               s6 = peg$c0;
               peg$currPos++;
             } else {
               s6 = peg$FAILED;
               if (peg$silentFails === 0) { peg$fail(peg$c1); }
             }
             if (s6 !== peg$FAILED) {
               s7 = peg$parse_();
               if (s7 !== peg$FAILED) {
                 s8 = peg$parseblock();
                 if (s8 !== peg$FAILED) {
                   s9 = peg$parse_();
                   if (s9 !== peg$FAILED) {
                     s6 = [s6, s7, s8, s9];
                     s5 = s6;
                   } else {
                     peg$currPos = s5;
                     s5 = peg$FAILED;
                   }
                 } else {
                   peg$currPos = s5;
                   s5 = peg$FAILED;
                 }
               } else {
                 peg$currPos = s5;
                 s5 = peg$FAILED;
               }
             } else {
               peg$currPos = s5;
               s5 = peg$FAILED;
             }
           }
           if (s4 !== peg$FAILED) {
             peg$savedPos = s0;
             s1 = peg$c2(s2, s4);
             s0 = s1;
           } else {
             peg$currPos = s0;
             s0 = peg$FAILED;
           }
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parseblock() {
     var s0, s1, s2, s3, s4, s5;

     s0 = peg$parseblock1();
     if (s0 === peg$FAILED) {
       s0 = peg$currPos;
       s1 = peg$parsexyz0_method();
       if (s1 !== peg$FAILED) {
         s2 = [];
         s3 = peg$currPos;
         s4 = peg$parse_();
         if (s4 !== peg$FAILED) {
           s5 = peg$parsexyz0();
           if (s5 !== peg$FAILED) {
             s4 = [s4, s5];
             s3 = s4;
           } else {
             peg$currPos = s3;
             s3 = peg$FAILED;
           }
         } else {
           peg$currPos = s3;
           s3 = peg$FAILED;
         }
         if (s3 !== peg$FAILED) {
           while (s3 !== peg$FAILED) {
             s2.push(s3);
             s3 = peg$currPos;
             s4 = peg$parse_();
             if (s4 !== peg$FAILED) {
               s5 = peg$parsexyz0();
               if (s5 !== peg$FAILED) {
                 s4 = [s4, s5];
                 s3 = s4;
               } else {
                 peg$currPos = s3;
                 s3 = peg$FAILED;
               }
             } else {
               peg$currPos = s3;
               s3 = peg$FAILED;
             }
           }
         } else {
           s2 = peg$FAILED;
         }
         if (s2 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c3(s1, s2);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
       if (s0 === peg$FAILED) {
         s0 = peg$currPos;
         s1 = peg$parsenoarg_method();
         if (s1 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c4(s1);
         }
         s0 = s1;
         if (s0 === peg$FAILED) {
           s0 = peg$parsecut();
           if (s0 === peg$FAILED) {
             s0 = peg$parseclip();
             if (s0 === peg$FAILED) {
               s0 = peg$parsehull();
               if (s0 === peg$FAILED) {
                 s0 = peg$parsewall();
                 if (s0 === peg$FAILED) {
                   s0 = peg$parsealign();
                   if (s0 === peg$FAILED) {
                     s0 = peg$parseadjoin();
                     if (s0 === peg$FAILED) {
                       s0 = peg$parsespread();
                       if (s0 === peg$FAILED) {
                         s0 = peg$parsecrop();
                         if (s0 === peg$FAILED) {
                           s0 = peg$parsejoin();
                           if (s0 === peg$FAILED) {
                             s0 = peg$parseflow();
                             if (s0 === peg$FAILED) {
                               s0 = peg$parseorbit();
                               if (s0 === peg$FAILED) {
                                 s0 = peg$parseselect();
                                 if (s0 === peg$FAILED) {
                                   s0 = peg$parsepad();
                                   if (s0 === peg$FAILED) {
                                     s0 = peg$parsereverse();
                                     if (s0 === peg$FAILED) {
                                       s0 = peg$parsecenter_method();
                                       if (s0 === peg$FAILED) {
                                         s0 = peg$currPos;
                                         s1 = peg$parsebad_method();
                                         if (s1 !== peg$FAILED) {
                                           peg$savedPos = s0;
                                           s1 = peg$c5(s1);
                                         }
                                         s0 = s1;
                                         if (s0 === peg$FAILED) {
                                           s0 = peg$currPos;
                                           s1 = peg$parse_();
                                           if (s1 !== peg$FAILED) {
                                             peg$savedPos = s0;
                                             s1 = peg$c6();
                                           }
                                           s0 = s1;
                                         }
                                       }
                                     }
                                   }
                                 }
                               }
                             }
                           }
                         }
                       }
                     }
                   }
                 }
               }
             }
           }
         }
       }
     }

     return s0;
   }

   function peg$parseblock1() {
     var s0, s1, s2, s3;

     s0 = peg$currPos;
     s1 = peg$parsexyz1_method();
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parsexyz1();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c7(s1, s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }
     if (s0 === peg$FAILED) {
       s0 = peg$currPos;
       s1 = peg$parsexyz1_method();
       if (s1 !== peg$FAILED) {
         peg$savedPos = s0;
         s1 = peg$c8(s1);
       }
       s0 = s1;
     }

     return s0;
   }

   function peg$parsereverse() {
     var s0, s1;

     s0 = peg$currPos;
     if (input.substr(peg$currPos, 7) === peg$c9) {
       s1 = peg$c9;
       peg$currPos += 7;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c10); }
     }
     if (s1 !== peg$FAILED) {
       peg$savedPos = s0;
       s1 = peg$c11();
     }
     s0 = s1;

     return s0;
   }

   function peg$parsecut() {
     var s0, s1, s2, s3;

     s0 = peg$currPos;
     if (input.substr(peg$currPos, 3) === peg$c12) {
       s1 = peg$c12;
       peg$currPos += 3;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c13); }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parseselector_list();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c14(s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parseselect() {
     var s0, s1, s2, s3;

     s0 = peg$currPos;
     if (input.substr(peg$currPos, 6) === peg$c15) {
       s1 = peg$c15;
       peg$currPos += 6;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c16); }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parseselector_list();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c17(s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parseclip() {
     var s0, s1, s2, s3;

     s0 = peg$currPos;
     if (input.substr(peg$currPos, 4) === peg$c18) {
       s1 = peg$c18;
       peg$currPos += 4;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c19); }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parseselector_list();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c20(s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parsehull() {
     var s0, s1, s2, s3;

     s0 = peg$currPos;
     if (input.substr(peg$currPos, 4) === peg$c21) {
       s1 = peg$c21;
       peg$currPos += 4;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c22); }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parseselector_list();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c23(s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }
     if (s0 === peg$FAILED) {
       s0 = peg$currPos;
       if (input.substr(peg$currPos, 4) === peg$c21) {
         s1 = peg$c21;
         peg$currPos += 4;
       } else {
         s1 = peg$FAILED;
         if (peg$silentFails === 0) { peg$fail(peg$c22); }
       }
       if (s1 !== peg$FAILED) {
         peg$savedPos = s0;
         s1 = peg$c24();
       }
       s0 = s1;
     }

     return s0;
   }

   function peg$parsewall() {
     var s0, s1, s2, s3;

     s0 = peg$currPos;
     if (input.substr(peg$currPos, 4) === peg$c25) {
       s1 = peg$c25;
       peg$currPos += 4;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c26); }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parseselector_list();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c27(s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }
     if (s0 === peg$FAILED) {
       s0 = peg$currPos;
       if (input.substr(peg$currPos, 4) === peg$c25) {
         s1 = peg$c25;
         peg$currPos += 4;
       } else {
         s1 = peg$FAILED;
         if (peg$silentFails === 0) { peg$fail(peg$c26); }
       }
       if (s1 !== peg$FAILED) {
         peg$savedPos = s0;
         s1 = peg$c28();
       }
       s0 = s1;
     }

     return s0;
   }

   function peg$parsealign() {
     var s0, s1, s2, s3;

     s0 = peg$currPos;
     if (input.substr(peg$currPos, 5) === peg$c29) {
       s1 = peg$c29;
       peg$currPos += 5;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c30); }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parseminmax();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c31(s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parseadjoin() {
     var s0, s1, s2, s3;

     s0 = peg$currPos;
     if (input.substr(peg$currPos, 6) === peg$c32) {
       s1 = peg$c32;
       peg$currPos += 6;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c33); }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parselist_of_axes_number_side();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c34(s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parsejoin() {
     var s0, s1, s2, s3;

     s0 = peg$currPos;
     if (input.substr(peg$currPos, 4) === peg$c35) {
       s1 = peg$c35;
       peg$currPos += 4;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c36); }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parselist_of_axes_number_side();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c37(s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parseflow() {
     var s0, s1, s2, s3;

     s0 = peg$currPos;
     if (input.substr(peg$currPos, 4) === peg$c38) {
       s1 = peg$c38;
       peg$currPos += 4;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c39); }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parselist_of_axes_number_side();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c40(s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parsecrop() {
     var s0, s1, s2, s3;

     s0 = peg$currPos;
     if (input.substr(peg$currPos, 4) === peg$c41) {
       s1 = peg$c41;
       peg$currPos += 4;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c42); }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parselist_of_axes_number_side();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c43(s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parsepad() {
     var s0, s1, s2, s3;

     s0 = peg$currPos;
     if (input.substr(peg$currPos, 3) === peg$c44) {
       s1 = peg$c44;
       peg$currPos += 3;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c45); }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parselist_of_axes_number_side();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c46(s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parseorbit() {
     var s0, s1, s2, s3;

     s0 = peg$currPos;
     if (input.substr(peg$currPos, 5) === peg$c47) {
       s1 = peg$c47;
       peg$currPos += 5;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c48); }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parselist_of_axis_number();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c49(s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parsespread() {
     var s0, s1, s2, s3;

     s0 = peg$currPos;
     if (input.substr(peg$currPos, 6) === peg$c50) {
       s1 = peg$c50;
       peg$currPos += 6;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c51); }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parsexyz1();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c52(s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parselist_of_axes_number_side() {
     var s0, s1, s2, s3, s4, s5;

     s0 = peg$currPos;
     s1 = peg$parseaxes_number_side();
     if (s1 !== peg$FAILED) {
       s2 = [];
       s3 = peg$currPos;
       s4 = peg$parse_();
       if (s4 !== peg$FAILED) {
         s5 = peg$parseaxes_number_side();
         if (s5 !== peg$FAILED) {
           s4 = [s4, s5];
           s3 = s4;
         } else {
           peg$currPos = s3;
           s3 = peg$FAILED;
         }
       } else {
         peg$currPos = s3;
         s3 = peg$FAILED;
       }
       while (s3 !== peg$FAILED) {
         s2.push(s3);
         s3 = peg$currPos;
         s4 = peg$parse_();
         if (s4 !== peg$FAILED) {
           s5 = peg$parseaxes_number_side();
           if (s5 !== peg$FAILED) {
             s4 = [s4, s5];
             s3 = s4;
           } else {
             peg$currPos = s3;
             s3 = peg$FAILED;
           }
         } else {
           peg$currPos = s3;
           s3 = peg$FAILED;
         }
       }
       if (s2 !== peg$FAILED) {
         peg$savedPos = s0;
         s1 = peg$c53(s1, s2);
         s0 = s1;
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parselist_of_axis_number() {
     var s0, s1, s2, s3, s4, s5;

     s0 = peg$currPos;
     s1 = peg$parseaxis_number();
     if (s1 !== peg$FAILED) {
       s2 = [];
       s3 = peg$currPos;
       s4 = peg$parse_();
       if (s4 !== peg$FAILED) {
         s5 = peg$parseaxis_number();
         if (s5 !== peg$FAILED) {
           s4 = [s4, s5];
           s3 = s4;
         } else {
           peg$currPos = s3;
           s3 = peg$FAILED;
         }
       } else {
         peg$currPos = s3;
         s3 = peg$FAILED;
       }
       while (s3 !== peg$FAILED) {
         s2.push(s3);
         s3 = peg$currPos;
         s4 = peg$parse_();
         if (s4 !== peg$FAILED) {
           s5 = peg$parseaxis_number();
           if (s5 !== peg$FAILED) {
             s4 = [s4, s5];
             s3 = s4;
           } else {
             peg$currPos = s3;
             s3 = peg$FAILED;
           }
         } else {
           peg$currPos = s3;
           s3 = peg$FAILED;
         }
       }
       if (s2 !== peg$FAILED) {
         peg$savedPos = s0;
         s1 = peg$c53(s1, s2);
         s0 = s1;
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parseaxis_number() {
     var s0, s1, s2, s3;

     s0 = peg$currPos;
     s1 = peg$parseaxes();
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parsenumber();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c54(s1, s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parseside() {
     var s0;

     if (input.substr(peg$currPos, 3) === peg$c55) {
       s0 = peg$c55;
       peg$currPos += 3;
     } else {
       s0 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c56); }
     }
     if (s0 === peg$FAILED) {
       if (input.substr(peg$currPos, 3) === peg$c57) {
         s0 = peg$c57;
         peg$currPos += 3;
       } else {
         s0 = peg$FAILED;
         if (peg$silentFails === 0) { peg$fail(peg$c58); }
       }
       if (s0 === peg$FAILED) {
         if (input.substr(peg$currPos, 6) === peg$c59) {
           s0 = peg$c59;
           peg$currPos += 6;
         } else {
           s0 = peg$FAILED;
           if (peg$silentFails === 0) { peg$fail(peg$c60); }
         }
       }
     }

     return s0;
   }

   function peg$parseaxes_number_side() {
     var s0, s1, s2, s3, s4, s5;

     s0 = peg$currPos;
     s1 = peg$parseaxes();
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parsenumber();
         if (s3 !== peg$FAILED) {
           s4 = peg$parse_();
           if (s4 !== peg$FAILED) {
             s5 = peg$parseside();
             if (s5 !== peg$FAILED) {
               peg$savedPos = s0;
               s1 = peg$c61(s1, s3, s5);
               s0 = s1;
             } else {
               peg$currPos = s0;
               s0 = peg$FAILED;
             }
           } else {
             peg$currPos = s0;
             s0 = peg$FAILED;
           }
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }
     if (s0 === peg$FAILED) {
       s0 = peg$currPos;
       s1 = peg$parseaxes();
       if (s1 !== peg$FAILED) {
         s2 = peg$parse_();
         if (s2 !== peg$FAILED) {
           s3 = peg$parseside();
           if (s3 !== peg$FAILED) {
             s4 = peg$parse_();
             if (s4 !== peg$FAILED) {
               s5 = peg$parsenumber();
               if (s5 !== peg$FAILED) {
                 peg$savedPos = s0;
                 s1 = peg$c62(s1, s3, s5);
                 s0 = s1;
               } else {
                 peg$currPos = s0;
                 s0 = peg$FAILED;
               }
             } else {
               peg$currPos = s0;
               s0 = peg$FAILED;
             }
           } else {
             peg$currPos = s0;
             s0 = peg$FAILED;
           }
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
       if (s0 === peg$FAILED) {
         s0 = peg$currPos;
         s1 = peg$parseaxes();
         if (s1 !== peg$FAILED) {
           s2 = peg$parse_();
           if (s2 !== peg$FAILED) {
             s3 = peg$parsenumber();
             if (s3 !== peg$FAILED) {
               peg$savedPos = s0;
               s1 = peg$c63(s1, s3);
               s0 = s1;
             } else {
               peg$currPos = s0;
               s0 = peg$FAILED;
             }
           } else {
             peg$currPos = s0;
             s0 = peg$FAILED;
           }
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
         if (s0 === peg$FAILED) {
           s0 = peg$currPos;
           s1 = peg$parseaxes();
           if (s1 !== peg$FAILED) {
             s2 = peg$parse_();
             if (s2 !== peg$FAILED) {
               s3 = peg$parseside();
               if (s3 !== peg$FAILED) {
                 peg$savedPos = s0;
                 s1 = peg$c64(s1, s3);
                 s0 = s1;
               } else {
                 peg$currPos = s0;
                 s0 = peg$FAILED;
               }
             } else {
               peg$currPos = s0;
               s0 = peg$FAILED;
             }
           } else {
             peg$currPos = s0;
             s0 = peg$FAILED;
           }
           if (s0 === peg$FAILED) {
             s0 = peg$currPos;
             s1 = peg$parseaxes();
             if (s1 !== peg$FAILED) {
               peg$savedPos = s0;
               s1 = peg$c65(s1);
             }
             s0 = s1;
           }
         }
       }
     }

     return s0;
   }

   function peg$parseminmax0() {
     var s0;

     if (input.substr(peg$currPos, 3) === peg$c55) {
       s0 = peg$c55;
       peg$currPos += 3;
     } else {
       s0 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c56); }
     }
     if (s0 === peg$FAILED) {
       if (input.substr(peg$currPos, 3) === peg$c57) {
         s0 = peg$c57;
         peg$currPos += 3;
       } else {
         s0 = peg$FAILED;
         if (peg$silentFails === 0) { peg$fail(peg$c58); }
       }
     }

     return s0;
   }

   function peg$parseminmax() {
     var s0, s1, s2, s3, s4, s5, s6;

     s0 = peg$currPos;
     s1 = [];
     s2 = peg$currPos;
     s3 = peg$parse_();
     if (s3 !== peg$FAILED) {
       s4 = peg$parseaxes();
       if (s4 !== peg$FAILED) {
         s5 = peg$parse_();
         if (s5 !== peg$FAILED) {
           if (input.substr(peg$currPos, 3) === peg$c55) {
             s6 = peg$c55;
             peg$currPos += 3;
           } else {
             s6 = peg$FAILED;
             if (peg$silentFails === 0) { peg$fail(peg$c56); }
           }
           if (s6 === peg$FAILED) {
             if (input.substr(peg$currPos, 3) === peg$c57) {
               s6 = peg$c57;
               peg$currPos += 3;
             } else {
               s6 = peg$FAILED;
               if (peg$silentFails === 0) { peg$fail(peg$c58); }
             }
             if (s6 === peg$FAILED) {
               if (input.substr(peg$currPos, 6) === peg$c59) {
                 s6 = peg$c59;
                 peg$currPos += 6;
               } else {
                 s6 = peg$FAILED;
                 if (peg$silentFails === 0) { peg$fail(peg$c60); }
               }
               if (s6 === peg$FAILED) {
                 s6 = peg$parseperct();
               }
             }
           }
           if (s6 !== peg$FAILED) {
             s3 = [s3, s4, s5, s6];
             s2 = s3;
           } else {
             peg$currPos = s2;
             s2 = peg$FAILED;
           }
         } else {
           peg$currPos = s2;
           s2 = peg$FAILED;
         }
       } else {
         peg$currPos = s2;
         s2 = peg$FAILED;
       }
     } else {
       peg$currPos = s2;
       s2 = peg$FAILED;
     }
     if (s2 !== peg$FAILED) {
       while (s2 !== peg$FAILED) {
         s1.push(s2);
         s2 = peg$currPos;
         s3 = peg$parse_();
         if (s3 !== peg$FAILED) {
           s4 = peg$parseaxes();
           if (s4 !== peg$FAILED) {
             s5 = peg$parse_();
             if (s5 !== peg$FAILED) {
               if (input.substr(peg$currPos, 3) === peg$c55) {
                 s6 = peg$c55;
                 peg$currPos += 3;
               } else {
                 s6 = peg$FAILED;
                 if (peg$silentFails === 0) { peg$fail(peg$c56); }
               }
               if (s6 === peg$FAILED) {
                 if (input.substr(peg$currPos, 3) === peg$c57) {
                   s6 = peg$c57;
                   peg$currPos += 3;
                 } else {
                   s6 = peg$FAILED;
                   if (peg$silentFails === 0) { peg$fail(peg$c58); }
                 }
                 if (s6 === peg$FAILED) {
                   if (input.substr(peg$currPos, 6) === peg$c59) {
                     s6 = peg$c59;
                     peg$currPos += 6;
                   } else {
                     s6 = peg$FAILED;
                     if (peg$silentFails === 0) { peg$fail(peg$c60); }
                   }
                   if (s6 === peg$FAILED) {
                     s6 = peg$parseperct();
                   }
                 }
               }
               if (s6 !== peg$FAILED) {
                 s3 = [s3, s4, s5, s6];
                 s2 = s3;
               } else {
                 peg$currPos = s2;
                 s2 = peg$FAILED;
               }
             } else {
               peg$currPos = s2;
               s2 = peg$FAILED;
             }
           } else {
             peg$currPos = s2;
             s2 = peg$FAILED;
           }
         } else {
           peg$currPos = s2;
           s2 = peg$FAILED;
         }
       }
     } else {
       s1 = peg$FAILED;
     }
     if (s1 !== peg$FAILED) {
       peg$savedPos = s0;
       s1 = peg$c66(s1);
     }
     s0 = s1;

     return s0;
   }

   function peg$parseselector_list() {
     var s0, s1, s2, s3, s4, s5, s6, s7;

     s0 = peg$currPos;
     s1 = peg$parseselector();
     if (s1 !== peg$FAILED) {
       s2 = [];
       s3 = peg$currPos;
       s4 = peg$parse_();
       if (s4 !== peg$FAILED) {
         if (input.charCodeAt(peg$currPos) === 44) {
           s5 = peg$c67;
           peg$currPos++;
         } else {
           s5 = peg$FAILED;
           if (peg$silentFails === 0) { peg$fail(peg$c68); }
         }
         if (s5 !== peg$FAILED) {
           s6 = peg$parse_();
           if (s6 !== peg$FAILED) {
             s7 = peg$parseselector();
             if (s7 !== peg$FAILED) {
               s4 = [s4, s5, s6, s7];
               s3 = s4;
             } else {
               peg$currPos = s3;
               s3 = peg$FAILED;
             }
           } else {
             peg$currPos = s3;
             s3 = peg$FAILED;
           }
         } else {
           peg$currPos = s3;
           s3 = peg$FAILED;
         }
       } else {
         peg$currPos = s3;
         s3 = peg$FAILED;
       }
       while (s3 !== peg$FAILED) {
         s2.push(s3);
         s3 = peg$currPos;
         s4 = peg$parse_();
         if (s4 !== peg$FAILED) {
           if (input.charCodeAt(peg$currPos) === 44) {
             s5 = peg$c67;
             peg$currPos++;
           } else {
             s5 = peg$FAILED;
             if (peg$silentFails === 0) { peg$fail(peg$c68); }
           }
           if (s5 !== peg$FAILED) {
             s6 = peg$parse_();
             if (s6 !== peg$FAILED) {
               s7 = peg$parseselector();
               if (s7 !== peg$FAILED) {
                 s4 = [s4, s5, s6, s7];
                 s3 = s4;
               } else {
                 peg$currPos = s3;
                 s3 = peg$FAILED;
               }
             } else {
               peg$currPos = s3;
               s3 = peg$FAILED;
             }
           } else {
             peg$currPos = s3;
             s3 = peg$FAILED;
           }
         } else {
           peg$currPos = s3;
           s3 = peg$FAILED;
         }
       }
       if (s2 !== peg$FAILED) {
         peg$savedPos = s0;
         s1 = peg$c69();
         s0 = s1;
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parseselector() {
     var s0, s1, s2, s3, s4, s5, s6, s7;

     s0 = peg$currPos;
     s1 = peg$parseselector_part();
     if (s1 !== peg$FAILED) {
       s2 = [];
       s3 = peg$currPos;
       s4 = peg$parse_();
       if (s4 !== peg$FAILED) {
         if (input.charCodeAt(peg$currPos) === 62) {
           s5 = peg$c70;
           peg$currPos++;
         } else {
           s5 = peg$FAILED;
           if (peg$silentFails === 0) { peg$fail(peg$c71); }
         }
         if (s5 === peg$FAILED) {
           s5 = null;
         }
         if (s5 !== peg$FAILED) {
           s6 = peg$parse_();
           if (s6 !== peg$FAILED) {
             s7 = peg$parseselector_part();
             if (s7 !== peg$FAILED) {
               s4 = [s4, s5, s6, s7];
               s3 = s4;
             } else {
               peg$currPos = s3;
               s3 = peg$FAILED;
             }
           } else {
             peg$currPos = s3;
             s3 = peg$FAILED;
           }
         } else {
           peg$currPos = s3;
           s3 = peg$FAILED;
         }
       } else {
         peg$currPos = s3;
         s3 = peg$FAILED;
       }
       while (s3 !== peg$FAILED) {
         s2.push(s3);
         s3 = peg$currPos;
         s4 = peg$parse_();
         if (s4 !== peg$FAILED) {
           if (input.charCodeAt(peg$currPos) === 62) {
             s5 = peg$c70;
             peg$currPos++;
           } else {
             s5 = peg$FAILED;
             if (peg$silentFails === 0) { peg$fail(peg$c71); }
           }
           if (s5 === peg$FAILED) {
             s5 = null;
           }
           if (s5 !== peg$FAILED) {
             s6 = peg$parse_();
             if (s6 !== peg$FAILED) {
               s7 = peg$parseselector_part();
               if (s7 !== peg$FAILED) {
                 s4 = [s4, s5, s6, s7];
                 s3 = s4;
               } else {
                 peg$currPos = s3;
                 s3 = peg$FAILED;
               }
             } else {
               peg$currPos = s3;
               s3 = peg$FAILED;
             }
           } else {
             peg$currPos = s3;
             s3 = peg$FAILED;
           }
         } else {
           peg$currPos = s3;
           s3 = peg$FAILED;
         }
       }
       if (s2 !== peg$FAILED) {
         s1 = [s1, s2];
         s0 = s1;
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parseselector_part() {
     var s0, s1;

     s0 = [];
     if (peg$c72.test(input.charAt(peg$currPos))) {
       s1 = input.charAt(peg$currPos);
       peg$currPos++;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c73); }
     }
     if (s1 !== peg$FAILED) {
       while (s1 !== peg$FAILED) {
         s0.push(s1);
         if (peg$c72.test(input.charAt(peg$currPos))) {
           s1 = input.charAt(peg$currPos);
           peg$currPos++;
         } else {
           s1 = peg$FAILED;
           if (peg$silentFails === 0) { peg$fail(peg$c73); }
         }
       }
     } else {
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parsebad_method() {
     var s0, s1, s2;

     s0 = peg$currPos;
     s1 = [];
     if (peg$c74.test(input.charAt(peg$currPos))) {
       s2 = input.charAt(peg$currPos);
       peg$currPos++;
     } else {
       s2 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c75); }
     }
     if (s2 !== peg$FAILED) {
       while (s2 !== peg$FAILED) {
         s1.push(s2);
         if (peg$c74.test(input.charAt(peg$currPos))) {
           s2 = input.charAt(peg$currPos);
           peg$currPos++;
         } else {
           s2 = peg$FAILED;
           if (peg$silentFails === 0) { peg$fail(peg$c75); }
         }
       }
     } else {
       s1 = peg$FAILED;
     }
     if (s1 !== peg$FAILED) {
       peg$savedPos = s0;
       s1 = peg$c76();
     }
     s0 = s1;

     return s0;
   }

   function peg$parsenoarg_method() {
     var s0;

     if (input.substr(peg$currPos, 4) === peg$c77) {
       s0 = peg$c77;
       peg$currPos += 4;
     } else {
       s0 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c78); }
     }

     return s0;
   }

   function peg$parsexyz1_method() {
     var s0;

     if (input.substr(peg$currPos, 5) === peg$c79) {
       s0 = peg$c79;
       peg$currPos += 5;
     } else {
       s0 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c80); }
     }
     if (s0 === peg$FAILED) {
       if (input.substr(peg$currPos, 9) === peg$c81) {
         s0 = peg$c81;
         peg$currPos += 9;
       } else {
         s0 = peg$FAILED;
         if (peg$silentFails === 0) { peg$fail(peg$c82); }
       }
       if (s0 === peg$FAILED) {
         if (input.substr(peg$currPos, 3) === peg$c83) {
           s0 = peg$c83;
           peg$currPos += 3;
         } else {
           s0 = peg$FAILED;
           if (peg$silentFails === 0) { peg$fail(peg$c84); }
         }
         if (s0 === peg$FAILED) {
           if (input.substr(peg$currPos, 6) === peg$c85) {
             s0 = peg$c85;
             peg$currPos += 6;
           } else {
             s0 = peg$FAILED;
             if (peg$silentFails === 0) { peg$fail(peg$c86); }
           }
           if (s0 === peg$FAILED) {
             if (input.substr(peg$currPos, 4) === peg$c87) {
               s0 = peg$c87;
               peg$currPos += 4;
             } else {
               s0 = peg$FAILED;
               if (peg$silentFails === 0) { peg$fail(peg$c88); }
             }
             if (s0 === peg$FAILED) {
               if (input.substr(peg$currPos, 8) === peg$c89) {
                 s0 = peg$c89;
                 peg$currPos += 8;
               } else {
                 s0 = peg$FAILED;
                 if (peg$silentFails === 0) { peg$fail(peg$c90); }
               }
               if (s0 === peg$FAILED) {
                 if (input.substr(peg$currPos, 6) === peg$c91) {
                   s0 = peg$c91;
                   peg$currPos += 6;
                 } else {
                   s0 = peg$FAILED;
                   if (peg$silentFails === 0) { peg$fail(peg$c92); }
                 }
                 if (s0 === peg$FAILED) {
                   if (input.substr(peg$currPos, 4) === peg$c93) {
                     s0 = peg$c93;
                     peg$currPos += 4;
                   } else {
                     s0 = peg$FAILED;
                     if (peg$silentFails === 0) { peg$fail(peg$c94); }
                   }
                   if (s0 === peg$FAILED) {
                     if (input.substr(peg$currPos, 4) === peg$c95) {
                       s0 = peg$c95;
                       peg$currPos += 4;
                     } else {
                       s0 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c96); }
                     }
                   }
                 }
               }
             }
           }
         }
       }
     }

     return s0;
   }

   function peg$parsexyz0_method() {
     var s0;

     s0 = peg$c97;

     return s0;
   }

   function peg$parsecenter_method() {
     var s0, s1, s2, s3;

     s0 = peg$currPos;
     if (input.substr(peg$currPos, 6) === peg$c59) {
       s1 = peg$c59;
       peg$currPos += 6;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c60); }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parsexyz1();
         if (s3 === peg$FAILED) {
           s3 = peg$parsexyz0();
         }
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c98(s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }
     if (s0 === peg$FAILED) {
       s0 = peg$currPos;
       if (input.substr(peg$currPos, 6) === peg$c59) {
         s1 = peg$c59;
         peg$currPos += 6;
       } else {
         s1 = peg$FAILED;
         if (peg$silentFails === 0) { peg$fail(peg$c60); }
       }
       if (s1 !== peg$FAILED) {
         peg$savedPos = s0;
         s1 = peg$c99();
       }
       s0 = s1;
     }

     return s0;
   }

   function peg$parsexyz0() {
     var s0;

     s0 = peg$parseaxes();

     return s0;
   }

   function peg$parsexyz1() {
     var s0, s1, s2, s3, s4, s5, s6;

     s0 = peg$currPos;
     s1 = [];
     s2 = peg$currPos;
     s3 = peg$parseaxes();
     if (s3 !== peg$FAILED) {
       s4 = peg$parse_();
       if (s4 !== peg$FAILED) {
         s5 = peg$parsevalue();
         if (s5 === peg$FAILED) {
           s5 = null;
         }
         if (s5 !== peg$FAILED) {
           s6 = peg$parse_();
           if (s6 !== peg$FAILED) {
             s3 = [s3, s4, s5, s6];
             s2 = s3;
           } else {
             peg$currPos = s2;
             s2 = peg$FAILED;
           }
         } else {
           peg$currPos = s2;
           s2 = peg$FAILED;
         }
       } else {
         peg$currPos = s2;
         s2 = peg$FAILED;
       }
     } else {
       peg$currPos = s2;
       s2 = peg$FAILED;
     }
     if (s2 !== peg$FAILED) {
       while (s2 !== peg$FAILED) {
         s1.push(s2);
         s2 = peg$currPos;
         s3 = peg$parseaxes();
         if (s3 !== peg$FAILED) {
           s4 = peg$parse_();
           if (s4 !== peg$FAILED) {
             s5 = peg$parsevalue();
             if (s5 === peg$FAILED) {
               s5 = null;
             }
             if (s5 !== peg$FAILED) {
               s6 = peg$parse_();
               if (s6 !== peg$FAILED) {
                 s3 = [s3, s4, s5, s6];
                 s2 = s3;
               } else {
                 peg$currPos = s2;
                 s2 = peg$FAILED;
               }
             } else {
               peg$currPos = s2;
               s2 = peg$FAILED;
             }
           } else {
             peg$currPos = s2;
             s2 = peg$FAILED;
           }
         } else {
           peg$currPos = s2;
           s2 = peg$FAILED;
         }
       }
     } else {
       s1 = peg$FAILED;
     }
     if (s1 !== peg$FAILED) {
       peg$savedPos = s0;
       s1 = peg$c100(s1);
     }
     s0 = s1;
     if (s0 === peg$FAILED) {
       s0 = peg$currPos;
       s1 = peg$parsevalue();
       if (s1 !== peg$FAILED) {
         s2 = peg$parse_();
         if (s2 !== peg$FAILED) {
           s3 = peg$parsevalue();
           if (s3 !== peg$FAILED) {
             s4 = peg$parse_();
             if (s4 !== peg$FAILED) {
               s5 = peg$parsevalue();
               if (s5 !== peg$FAILED) {
                 peg$savedPos = s0;
                 s1 = peg$c101(s1, s3, s5);
                 s0 = s1;
               } else {
                 peg$currPos = s0;
                 s0 = peg$FAILED;
               }
             } else {
               peg$currPos = s0;
               s0 = peg$FAILED;
             }
           } else {
             peg$currPos = s0;
             s0 = peg$FAILED;
           }
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
       if (s0 === peg$FAILED) {
         s0 = peg$currPos;
         s1 = peg$parsevalue();
         if (s1 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c102(s1);
         }
         s0 = s1;
       }
     }

     return s0;
   }

   function peg$parsexyz2() {
     var s0, s1, s2, s3, s4, s5, s6;

     s0 = peg$currPos;
     s1 = [];
     s2 = peg$currPos;
     s3 = peg$parse_();
     if (s3 !== peg$FAILED) {
       s4 = peg$parseaxes();
       if (s4 !== peg$FAILED) {
         s5 = peg$parse_();
         if (s5 !== peg$FAILED) {
           s6 = peg$parsepair();
           if (s6 === peg$FAILED) {
             s6 = peg$parsevalue();
           }
           if (s6 !== peg$FAILED) {
             s3 = [s3, s4, s5, s6];
             s2 = s3;
           } else {
             peg$currPos = s2;
             s2 = peg$FAILED;
           }
         } else {
           peg$currPos = s2;
           s2 = peg$FAILED;
         }
       } else {
         peg$currPos = s2;
         s2 = peg$FAILED;
       }
     } else {
       peg$currPos = s2;
       s2 = peg$FAILED;
     }
     if (s2 !== peg$FAILED) {
       while (s2 !== peg$FAILED) {
         s1.push(s2);
         s2 = peg$currPos;
         s3 = peg$parse_();
         if (s3 !== peg$FAILED) {
           s4 = peg$parseaxes();
           if (s4 !== peg$FAILED) {
             s5 = peg$parse_();
             if (s5 !== peg$FAILED) {
               s6 = peg$parsepair();
               if (s6 === peg$FAILED) {
                 s6 = peg$parsevalue();
               }
               if (s6 !== peg$FAILED) {
                 s3 = [s3, s4, s5, s6];
                 s2 = s3;
               } else {
                 peg$currPos = s2;
                 s2 = peg$FAILED;
               }
             } else {
               peg$currPos = s2;
               s2 = peg$FAILED;
             }
           } else {
             peg$currPos = s2;
             s2 = peg$FAILED;
           }
         } else {
           peg$currPos = s2;
           s2 = peg$FAILED;
         }
       }
     } else {
       s1 = peg$FAILED;
     }
     if (s1 !== peg$FAILED) {
       peg$savedPos = s0;
       s1 = peg$c103(s1);
     }
     s0 = s1;
     if (s0 === peg$FAILED) {
       s0 = peg$currPos;
       s1 = peg$parsepair();
       if (s1 !== peg$FAILED) {
         peg$savedPos = s0;
         s1 = peg$c104(s1);
       }
       s0 = s1;
       if (s0 === peg$FAILED) {
         s0 = peg$currPos;
         s1 = peg$parsevalue();
         if (s1 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c105(s1);
         }
         s0 = s1;
       }
     }

     return s0;
   }

   function peg$parsepair() {
     var s0, s1, s2, s3;

     s0 = peg$currPos;
     s1 = peg$parsevalue();
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
       if (s2 !== peg$FAILED) {
         s3 = peg$parsevalue();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c106(s1, s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parsevalue() {
     var s0;

     s0 = peg$parseperct();
     if (s0 === peg$FAILED) {
       s0 = peg$parsenumber();
     }

     return s0;
   }

   function peg$parsenumber() {
     var s0;

     s0 = peg$parseperct();
     if (s0 === peg$FAILED) {
       s0 = peg$parsefloat();
     }

     return s0;
   }

   function peg$parsefloat() {
     var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

     s0 = peg$currPos;
     if (peg$c107.test(input.charAt(peg$currPos))) {
       s1 = input.charAt(peg$currPos);
       peg$currPos++;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c108); }
     }
     if (s1 === peg$FAILED) {
       s1 = null;
     }
     if (s1 !== peg$FAILED) {
       s2 = [];
       if (peg$c109.test(input.charAt(peg$currPos))) {
         s3 = input.charAt(peg$currPos);
         peg$currPos++;
       } else {
         s3 = peg$FAILED;
         if (peg$silentFails === 0) { peg$fail(peg$c110); }
       }
       if (s3 !== peg$FAILED) {
         while (s3 !== peg$FAILED) {
           s2.push(s3);
           if (peg$c109.test(input.charAt(peg$currPos))) {
             s3 = input.charAt(peg$currPos);
             peg$currPos++;
           } else {
             s3 = peg$FAILED;
             if (peg$silentFails === 0) { peg$fail(peg$c110); }
           }
         }
       } else {
         s2 = peg$FAILED;
       }
       if (s2 !== peg$FAILED) {
         s3 = peg$currPos;
         if (peg$c111.test(input.charAt(peg$currPos))) {
           s4 = input.charAt(peg$currPos);
           peg$currPos++;
         } else {
           s4 = peg$FAILED;
           if (peg$silentFails === 0) { peg$fail(peg$c112); }
         }
         if (s4 !== peg$FAILED) {
           s5 = [];
           if (peg$c109.test(input.charAt(peg$currPos))) {
             s6 = input.charAt(peg$currPos);
             peg$currPos++;
           } else {
             s6 = peg$FAILED;
             if (peg$silentFails === 0) { peg$fail(peg$c110); }
           }
           if (s6 !== peg$FAILED) {
             while (s6 !== peg$FAILED) {
               s5.push(s6);
               if (peg$c109.test(input.charAt(peg$currPos))) {
                 s6 = input.charAt(peg$currPos);
                 peg$currPos++;
               } else {
                 s6 = peg$FAILED;
                 if (peg$silentFails === 0) { peg$fail(peg$c110); }
               }
             }
           } else {
             s5 = peg$FAILED;
           }
           if (s5 !== peg$FAILED) {
             s6 = peg$currPos;
             if (peg$c113.test(input.charAt(peg$currPos))) {
               s7 = input.charAt(peg$currPos);
               peg$currPos++;
             } else {
               s7 = peg$FAILED;
               if (peg$silentFails === 0) { peg$fail(peg$c114); }
             }
             if (s7 !== peg$FAILED) {
               if (peg$c107.test(input.charAt(peg$currPos))) {
                 s8 = input.charAt(peg$currPos);
                 peg$currPos++;
               } else {
                 s8 = peg$FAILED;
                 if (peg$silentFails === 0) { peg$fail(peg$c108); }
               }
               if (s8 !== peg$FAILED) {
                 s9 = [];
                 if (peg$c109.test(input.charAt(peg$currPos))) {
                   s10 = input.charAt(peg$currPos);
                   peg$currPos++;
                 } else {
                   s10 = peg$FAILED;
                   if (peg$silentFails === 0) { peg$fail(peg$c110); }
                 }
                 if (s10 !== peg$FAILED) {
                   while (s10 !== peg$FAILED) {
                     s9.push(s10);
                     if (peg$c109.test(input.charAt(peg$currPos))) {
                       s10 = input.charAt(peg$currPos);
                       peg$currPos++;
                     } else {
                       s10 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c110); }
                     }
                   }
                 } else {
                   s9 = peg$FAILED;
                 }
                 if (s9 !== peg$FAILED) {
                   s7 = [s7, s8, s9];
                   s6 = s7;
                 } else {
                   peg$currPos = s6;
                   s6 = peg$FAILED;
                 }
               } else {
                 peg$currPos = s6;
                 s6 = peg$FAILED;
               }
             } else {
               peg$currPos = s6;
               s6 = peg$FAILED;
             }
             if (s6 === peg$FAILED) {
               s6 = null;
             }
             if (s6 !== peg$FAILED) {
               s4 = [s4, s5, s6];
               s3 = s4;
             } else {
               peg$currPos = s3;
               s3 = peg$FAILED;
             }
           } else {
             peg$currPos = s3;
             s3 = peg$FAILED;
           }
         } else {
           peg$currPos = s3;
           s3 = peg$FAILED;
         }
         if (s3 === peg$FAILED) {
           s3 = null;
         }
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c115();
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parseperct() {
     var s0, s1, s2;

     s0 = peg$currPos;
     s1 = peg$parsefloat();
     if (s1 !== peg$FAILED) {
       if (input.charCodeAt(peg$currPos) === 37) {
         s2 = peg$c116;
         peg$currPos++;
       } else {
         s2 = peg$FAILED;
         if (peg$silentFails === 0) { peg$fail(peg$c117); }
       }
       if (s2 !== peg$FAILED) {
         peg$savedPos = s0;
         s1 = peg$c118(s1);
         s0 = s1;
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parseaxes() {
     var s0, s1;

     s0 = [];
     if (peg$c119.test(input.charAt(peg$currPos))) {
       s1 = input.charAt(peg$currPos);
       peg$currPos++;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c120); }
     }
     if (s1 !== peg$FAILED) {
       while (s1 !== peg$FAILED) {
         s0.push(s1);
         if (peg$c119.test(input.charAt(peg$currPos))) {
           s1 = input.charAt(peg$currPos);
           peg$currPos++;
         } else {
           s1 = peg$FAILED;
           if (peg$silentFails === 0) { peg$fail(peg$c120); }
         }
       }
     } else {
       s0 = peg$FAILED;
     }

     return s0;
   }

   function peg$parse_() {
     var s0, s1, s2;

     peg$silentFails++;
     s0 = peg$currPos;
     s1 = [];
     if (peg$c122.test(input.charAt(peg$currPos))) {
       s2 = input.charAt(peg$currPos);
       peg$currPos++;
     } else {
       s2 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c123); }
     }
     while (s2 !== peg$FAILED) {
       s1.push(s2);
       if (peg$c122.test(input.charAt(peg$currPos))) {
         s2 = input.charAt(peg$currPos);
         peg$currPos++;
       } else {
         s2 = peg$FAILED;
         if (peg$silentFails === 0) { peg$fail(peg$c123); }
       }
     }
     if (s1 !== peg$FAILED) {
       peg$savedPos = s0;
       s1 = peg$c124();
     }
     s0 = s1;
     peg$silentFails--;
     if (s0 === peg$FAILED) {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c121); }
     }

     return s0;
   }


     function makeList(head, tail) {
       if (tail.length){
          return [head].concat(tail.map(function(d){return d[1]}))
       }
       else
          return [head]
     }


   peg$result = peg$startRuleFunction();

   if (peg$result !== peg$FAILED && peg$currPos === input.length) {
     return peg$result;
   } else {
     if (peg$result !== peg$FAILED && peg$currPos < input.length) {
       peg$fail(peg$endExpectation());
     }

     throw peg$buildStructuredError(
       peg$maxFailExpected,
       peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
       peg$maxFailPos < input.length
         ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
         : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
     );
   }
 }

 return {
   SyntaxError: peg$SyntaxError,
   parse:       peg$parse
 };
})();
